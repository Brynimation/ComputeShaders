// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#define GROUP_SIZE_X 256
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

float hash( float n )
{
	return frac(sin(n)*43758.5453);
}

// The noise function returns a value in the range -1.0f -> 1.0f 
float noise1( float3 x )
{
	float3 p = floor(x);
	float3 f = frac(x);

	f       = f*f*(3.0-2.0*f);
	float n = p.x + p.y*57.0 + 113.0*p.z;

	return lerp(lerp(lerp( hash(n+0.0), hash(n+1.0),f.x),
					lerp( hash(n+57.0), hash(n+58.0),f.x),f.y),
				lerp(lerp( hash(n+113.0), hash(n+114.0),f.x),
					lerp( hash(n+170.0), hash(n+171.0),f.x),f.y),f.z);
}

struct Boid
{
    float3 position;
    float3 direction;
    float3 noiseOffset;
};

RWStructuredBuffer<Boid> _BoidsBuffer;

float time;
float deltaTime;
float rotationSpeed;
float boidSpeed;
float boidSpeedVariation;
float3 flockPosition;
float neighbourDistance;
int boidsCount;

[numthreads(GROUP_SIZE_X,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    /*To simulate the movement of a flock, we have each member of the flock adhere to 3 simple rules:
        -Separation: Steer away from other local boids by moving in the direction that points away from the vectors from the current boid to the local boids
        -Alignment: Steer towards the average forward vector of local boidsBuffer
        -Cohesion: Steer towards the average position of local boids*/

        Boid boid = _BoidsBuffer[id.x];
        //we're going to vary the speed of each individual boid using noise
        float noise = clamp(noise1(time/100.0 + boid.noiseOffset), -1, 1) * 2.0 -1.0;

        float speed = boidSpeed * (1.0 + noise * boidSpeedVariation);
        float3 separation = float3(0.0,0.0,0.0);
        float3 alignment = float3(0.0,0.0,0.0);
        float3 cohesion = flockPosition;
        uint nearbyCount = 1; //number of nearby boids 

        //loop through all other boids 
        for(int i = 0; i < boidsCount; i++)
        {
            if(i == (int) id.x) //do not account for the current boid 
            {
                continue;
            }
            Boid curBoid = _BoidsBuffer[i];
            float3 curOffset = boid.position - curBoid.position;
            float dist = length(curOffset);
            if(dist < neighbourDistance)
            {
                dist = max(dist, 0.000001);
                /*1/distance - 1/neighbourDistance:
                    if the distance between two boids is small, then their tendancy to separate from eachother is large.
                */ 
                separation += curOffset * (1.0/dist - 1.0/neighbourDistance);
                alignment += curBoid.direction; //Steer towards the average forward vector of local boids 
                cohesion += curBoid.position; //Steer towards the average position of local boids 
                nearbyCount++;
            }
       }
       
        float average = 1.0/(float)nearbyCount; 
        alignment *= average; //average alignment 
        cohesion *= average;  //average cohesion 

        cohesion = normalize(cohesion - boid.position); 

        float3 targetDirection = alignment + cohesion + separation;
        boid.direction = lerp(targetDirection, normalize(boid.direction), 0.94); //boid points 94% of its current direction and 6% towards the target direction
        boid.position += boid.direction * speed * deltaTime;
        _BoidsBuffer[id.x] = boid;
}
