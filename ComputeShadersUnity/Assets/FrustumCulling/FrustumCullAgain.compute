#pragma kernel CSMain

//We keep two buffers accessed by the kernel, a constant buffer that is the same for every computation,
// and an output buffer that is written to by the kernel


struct InstanceData 
{
    float4 position;
    uint instanceId;
};

RWStructuredBuffer<InstanceData> _Positions;
RWStructuredBuffer<float4> cameraFrustumPlanes;
float4 _CameraFrustumPlanes[6];
RWStructuredBuffer<uint> _Results;

//RWStructuredBuffer<float4> visibleList;
RWStructuredBuffer<float4> visibleList;
[numthreads(256,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	uint index = id.x;
	
	InstanceData data = _Positions[index];
	
	float4 CameraDistances0 = float4(
			dot(_CameraFrustumPlanes[0].xyz, data.position.xyz) + _CameraFrustumPlanes[0].w,
			dot(_CameraFrustumPlanes[1].xyz, data.position.xyz) + _CameraFrustumPlanes[1].w,
			dot(_CameraFrustumPlanes[2].xyz, data.position.xyz) + _CameraFrustumPlanes[2].w,
			dot(_CameraFrustumPlanes[3].xyz, data.position.xyz) + _CameraFrustumPlanes[3].w
		);
	
	float2 CameraDistances1 = float2(
			dot(_CameraFrustumPlanes[4].xyz, data.position.xyz) + _CameraFrustumPlanes[4].w,
			dot(_CameraFrustumPlanes[5].xyz, data.position.xyz) + _CameraFrustumPlanes[5].w
		);
		
	_Results[data.instanceId] = (all(CameraDistances0 >= -2) && all(CameraDistances1 >= -2)) ? 1 : 0;


}
