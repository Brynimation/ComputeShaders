// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
struct Vertex
{
	float3 position;
	float3 normal;
};

RWStructuredBuffer<Vertex> vertexBuffer; //can be read from and written to by this shader
StructuredBuffer<Vertex> initialBuffer; //can only be read from by this shader
float delta;
float radius;

[numthreads(1,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	float3 initialPos = initialBuffer[id.x].position;
	float3 positionOnSphere = float3(normalize(initialPos) * radius);
	float3 pos = lerp(initialPos, positionOnSphere, delta);

	//We adjust the normals in order to reduce sharpness of the edges when the cube becomes a sphere

	float3 initialNormal = initialBuffer[id.x].normal;
	float3 sphereNormal = normalize(pos);
	float3 norm = lerp(initialNormal, sphereNormal, delta);

	vertexBuffer[id.x].position = pos;
	vertexBuffer[id.x].normal = norm;
}
