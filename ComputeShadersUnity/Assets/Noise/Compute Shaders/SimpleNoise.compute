// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
int texResolution;
float time;

/*The values a, b and c are chosen to maximise randomness by reducing banding (the grouping of similar coloured pixels).

Totally random noise is only useful up to a point. 
Perlin noise is a procedural texture primitive, a type of gradient noise used by visual effects artists to increase the 
appearance of realism in computer graphics. The function has a pseudo-random appearance, yet all of its visual details are the same size.
Random values transition between each other smoothly.
*/
float random(float2 position, float seed)
{
    const float a = 12.9898;
    const float b = 78.233;
    const float c = 43758.543123;
    return frac(sin(dot(position, float2(a,b)) + seed)*c);
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!

    float4 white = 1; //equivalent to white = (1,1,1,1)
    Result[id.xy] = random(((float2)id.xy)/(float)texResolution, time) * white;
}
