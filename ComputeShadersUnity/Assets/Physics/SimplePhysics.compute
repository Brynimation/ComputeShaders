// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#define GROUP_SIZE 256
#define PI2 6.28318530718

struct Ball
{
    float3 position;
    float3 velocity;
    float4 colour;
};
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWStructuredBuffer<Ball> ballsBuffer;

float deltaTime;
int ballsCount;
float radius;
float4 limitsXZ;
float floorY;

#define LIMITS_MIN_X limitsXZ.x
#define LIMITS_MAX_X limitsXZ.y
#define LIMITS_MIN_Z limitsXZ.z
#define LIMITS_MAX_Z limitsXZ.w
#define LIMITS_MIN_Y floorY

[numthreads(GROUP_SIZE,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!

    Ball ball = ballsBuffer[id.x];
    ball.position += ball.velocity * deltaTime;

    //keep balls within limits
    if(ball.position.x < LIMITS_MIN_X || ball.position.x > LIMITS_MAX_X)
    {
        ball.position.x = clamp(ball.position.x, LIMITS_MIN_X, LIMITS_MAX_X);
        //make it bounce by inverting the velocity
        ball.velocity.x = -ball.velocity.x;
    }
    if(ball.position.z < LIMITS_MIN_Z || ball.position.z > LIMITS_MAX_Z)
    {
        ball.position.z = clamp(ball.position.z, LIMITS_MIN_Z, LIMITS_MAX_Z);
        //make it bounce by inverting the velocity
        ball.velocity.z = -ball.velocity.z;
    }
    if(ball.position.y < LIMITS_MIN_Y)
    {
        ball.position.y = LIMITS_MIN_Y;
        ball.velocity.xz *= 0.96;
        ball.velocity.y = -ball.velocity.y * 0.8;
    }

    //super simple collision detection
    float3 normal;
    float3 relativeVelocity;

    for(int i = 0; i < ballsCount; i++)
    {
        if(i == id.x) continue;
        Ball ball2 = ballsBuffer[(uint)i];
        normal = ball.position - ball2.position;
        const float dist = length(normal);

        //if the balls collide
        if(dist < 2 * radius)
        {
            normal *= 0.5*dist - radius;
            ball.position -= normal;
            ball2.position += normal;

            relativeVelocity = ball.velocity - ball2.velocity;

            normal = normalize(normal);
            normal *= dot(relativeVelocity, normal);

            ball.velocity -= normal;
            ball2.velocity += normal;
        }

    }

    ball.velocity.xz *= 0.98; //slow the balls over time
    ball.velocity.y -= 9.8 * deltaTime; //acceleration due to gravity
    ballsBuffer[id.x] = ball;
}
